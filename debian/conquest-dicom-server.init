#!/bin/sh
### BEGIN INIT INFO
# Provides:          dgate
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Init-Script for Conquest DICOM Server: dgate
### END INIT INFO

# Author: Mathieu Malaterre <malat@debian.org>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
DESC="Conquest DICOM Server"
PACKAGE=conquest-dicom-server
PATH=/sbin:/usr/sbin:/bin:/usr/bin
ETCDIR=/etc/$PACKAGE
LOGDIR=/var/log/$PACKAGE
USER=_conquest
GROUP=_conquest
NAME=dgate
DAEMON=/usr/bin/$NAME # Introduce the server's location here
DAEMON_ARGS="-w$ETCDIR -^$LOGDIR/dgate.log" # Arguments to run the daemon with
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Does not run if there's no user/group conquest
if ! getent passwd | grep -q "^$USER:"; then
    echo "Conquest user does not exist. Aborting" >&2
    exit 1
fi
if ! getent group | grep -q "^$GROUP:"; then
    echo "Conquest group does not exist. Aborting" >&2
    exit 1
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	#start-stop-daemon --start --verbose --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
	#	|| return 1
	start-stop-daemon --background --start --verbose --make-pidfile \
                          --pidfile $PIDFILE --chuid $USER:$GROUP --exec \
                          $DAEMON -- $DAEMON_ARGS
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	#start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	#RETVAL="$?"
	#[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --verbose --oknodo --pidfile $PIDFILE \
                          --user $USER
	RETVAL="$?"
	#[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function to regenerate the database
#
do_regen() {
	#
	# This is probably start-stop-daemon abuse, but no other
	# way (to my knowledge) to run something as another user
	# that have /bin/false as shell.
	#
	start-stop-daemon --start --verbose --chuid $USER:$GROUP --exec \
                          $DAEMON -- $DAEMON_ARGS -v -r
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE \
                          --user $USER --name $NAME
	return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  regen)
	do_regen
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|regen|restart|force-reload}" >&2
	exit 3
	;;
esac

:
